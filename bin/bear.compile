#!/usr/bin/env php
<?php

/**
 * Application compiler
 *
 * usage: php -d apc.enable_cli=1 -d apc.stat=0 bin/bear.compile {appsDir} for APC
 *        php bin/bear.compile {appsDir} for FileCache
 *
 * + Loader file at var/lib/preloader/preload.php
 * + Application object cache
 * + Resource object cache
 * + Aspect weaved resource files
 * + Annotation cache
 *
 * @see https://github.com/mtdowling/ClassPreloader
 */
namespace BEAR\Package\Dev\Compiler{

    init: {
        $appDir = isset($argv[1]) ? $argv[1] : error();
        $configFile = $appDir . '/var/lib/preloader/config.php';
        if (! file_exists($configFile)) {
            error("invalid app-dir:{$appDir}");
        }
    }

    main: {
        require $appDir . '/bootstrap/autoload.php';
        echo 'compile loader ...' . PHP_EOL;
        compileLoader($appDir);
        echo 'compile resources ...' . PHP_EOL;
        compileObjectGraph($appDir);
        echo 'compile annotations ...' . PHP_EOL;
        compileAnnotation($appDir);
        $output = dirname(__DIR__) . '/' . $appDir . '/var/tmp/apc.dump';
        if (ini_get('apc.enable_cli') && ini_get('apc.stat') == 0 ) {
            apc_bin_dumpfile([], null, $output);
            echo "apc dumped -> {$output}" . PHP_EOL;
        }
    }

    function compileLoader($appDir) {

        ini_set('display_errors', 1);
        ini_set('xhprof.output_dir', sys_get_temp_dir());

        $packageDir = dirname((__DIR__));
        $preLoader = $packageDir . '/vendor/bin/classpreloader.php';
        $config = $appDir . '/var/lib/preloader/config.php';
        $output = $appDir . '/var/tmp/preloader/preload.php';
        $minOutput = $appDir . '/var/tmp/preloader/preload.min.php';
        $compilePreloader = "php {$preLoader} compile --strip_comments=0 --config={$config} --output={$output}";

        echo $compilePreloader . PHP_EOL;
        passthru($compilePreloader);
        $lint = "php -l {$output}";
        echo $lint . PHP_EOL;
        passthru($lint);

        /** @todo "min" loader */
//        file_put_contents($minOutput, php_strip_whitespace(file_get_contents($output)));
//        echo "preload.min.php -> {$minOutput}" . PHP_EOL;
    }

    function compileObjectGraph($appDir)
    {
        $app = require $appDir . '/bootstrap/instance.php';
        /** @var $app \BEAR\Package\Provide\Application\AbstractApp */
        $res = 0;
        foreach ($app->resource as $meta) {
            $ro = $app->resource->newInstance($meta->uri);
            printf("%s -> %s" . PHP_EOL, $meta->uri, get_class($ro));
            $res++;
        }
        echo $meta->uri . "{$res} resources created." . PHP_EOL;
    }

    function compileAnnotation($appDir)
    {
        $app = require $appDir . '/bootstrap/instance.php';
        $reader = \Ray\Di\Injector::create([
                new \BEAR\Sunday\Module\Constant\NamedModule(['tmp_dir' => $appDir . '/tmp/cache']),
                new \BEAR\Sunday\Module\Cache\CacheModule,
                new \BEAR\Sunday\Module\Code\CachedAnnotationModule
            ])->getInstance('Doctrine\Common\Annotations\Reader');
        /** @var $reader \Doctrine\Common\Annotations\Reader' */
        foreach ($app->resource as $meta) {

            // class
            /** @var $meta \BEAR\Resource\Meta */
            $refClass = new \ReflectionClass($meta->class);
            $annotations = $reader->getClassAnnotations($refClass);
            if ($annotations) {
                $annotationArr = [];
                foreach ($annotations as $annotation) {
                    $annotationArr[] = get_class($annotation);
                }
                printf("%s @%s" . PHP_EOL, $meta->class, implode(', ', $annotationArr));
            }

            // method
            $methods = $refClass->getMethods();
            foreach ($methods as $method) {
                $annotations = $reader->getMethodAnnotations($method);
                if ($annotations) {
                    $annotationArr = [];
                    foreach ($annotations as $annotation) {
                        $annotationArr[] = get_class($annotation);
                    }
                    printf("%s::%s -> @%s" . PHP_EOL, $method->class, $method->name, implode(', ', $annotationArr));
                }
            }
        }
    }

    function error($msg = 'Usage: php [-d apc.enable_cli=1 -d apc.stat=0] bear.compiler <app-dir>')
    {
        error_log($msg);
        exit(1);
    }
}